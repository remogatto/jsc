#!/usr/bin/env ruby

require 'getoptlong'
require 'rdoc/usage'

require File.expand_path(
    File.join(File.dirname(__FILE__), %w[.. lib jsc]))

USAGE_PREAMBLE = <<-EOU

jsc, JavaScript Compiler.

This command compiles your JavaScript code throught Google Closure Compiler Service.
Look at http://gemcutter.org/gems/jsc for more info.

== Usage

jsc [options] ... CODE

--file x, -f x:
   compile file x

--errors, -e:
   check for errors

--warns, -w:
   check for warnings

--stats, -s:
   get statistics for compiled code

--level value, -l value:
   compile with level value
   If this option is not supplied, SIMPLE_OPTIMIZATIONS will be used
   (look at Google API for accepted values).

--help, -h:
   this help

CODE: The code that will be compiled.
 
EOU

opts = GetoptLong.new(
                      [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
                      [ '--file', '-f', GetoptLong::OPTIONAL_ARGUMENT ],
                      [ '--errors', '-e', GetoptLong::NO_ARGUMENT ],
                      [ '--warns', '-w', GetoptLong::NO_ARGUMENT ],
                      [ '--stats', '-s', GetoptLong::NO_ARGUMENT ],
                      [ '--level','-l',  GetoptLong::REQUIRED_ARGUMENT ]
                      )

file = false
output_info, level, file_path = String.new

opts.each do |opt, arg|
  case opt
  when '--help'
    puts USAGE_PREAMBLE
    exit 0
  when '--file'
    file = true
    file_path = arg
  when '--level'
    if arg == ''
      level = "SIMPLE_OPTIMIZATIONS"
    else
      level = arg
    end
  when '--errors'
    output_info = "errors"
  when '--warns'
    output_info = "warnings"
  when '--stats'
    output_info = "statistics"
  end
end

# -f option or CODE arg requested
unless ARGV.length > 0 or file
   puts "Missing any argument (try --help)"
   exit 0
end

code = ARGV.shift

if file
    puts JSCompiler.compile_file(file_path, output_info, level)
else
    puts JSCompiler.compile(code, output_info, level)
end
