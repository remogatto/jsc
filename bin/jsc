#!/usr/bin/env ruby

require 'getoptlong'
require 'rdoc/usage'

require File.expand_path(
    File.join(File.dirname(__FILE__), %w[.. lib jsc]))

USAGE_PREAMBLE = <<-EOU

jsc, JavaScript Compiler.

This command compiles your JavaScript code throught Google Closure Compiler Service.
Look at http://gemcutter.org/gems/jsc for more info.

== Usage

jsc [options] ... ARG

--code x, -c x:
   compile code x

--errors, -e:
   check for errors

--warns, -w:
   check for warnings

--stats, -s:
   get statistics for compiled code

--all, -a:
   execute every check for this code

--level value, -l value:
   compile with level value
   If this option is not supplied, SIMPLE_OPTIMIZATIONS will be used
   (look at Google API for accepted values).

--version, -v:
   show version

--help, -h:
   this help

ARG: A path to a javascript file or the code that will be compiled.

If one of the following options is not specified

-e, -w, -s, -a

the code will be first compiled for errors and only if no errors are found 
it will return the compiled code 
EOU

opts = GetoptLong.new(
                      [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
                      [ '--version', '-v', GetoptLong::NO_ARGUMENT ],
                      [ '--code', '-c', GetoptLong::OPTIONAL_ARGUMENT ],
                      [ '--errors', '-e', GetoptLong::NO_ARGUMENT ],
                      [ '--warns', '-w', GetoptLong::NO_ARGUMENT ],
                      [ '--stats', '-s', GetoptLong::NO_ARGUMENT ],
                      [ '--all', '-a', GetoptLong::NO_ARGUMENT ],
                      [ '--level','-l',  GetoptLong::REQUIRED_ARGUMENT ]
                      )

file = true
output_info, level, code = ""

opts.each do |opt, arg|
  case opt
  when '--help'
    puts USAGE_PREAMBLE
    exit 0
  when '--version'
    puts JSCompiler::VERSION
    exit 0
  when '--code'
    file = false
    code = arg
  when '--level'
    if arg == ''
      level = "SIMPLE_OPTIMIZATIONS"
    else
      level = arg
    end
  when '--errors'
    output_info = "errors"
  when '--warns'
    output_info = "warnings"
  when '--stats'
    output_info = "statistics"
  when '--all'
    output_info = "all"
  end
end

# -f option or CODE arg requested
unless ARGV.length > 0 or code
  puts "Missing any argument (try --help)"
  exit 0
end

arg = code.blank? ? ARGV.shift : code

if output_info.eql?("all")
  puts JSCompiler.full_compile(arg, file, level)
elsif output_info.blank?
  errors_output = JSCompiler.compile(arg, file, "errors", level)
  unless errors_output.eql?("No errors")
    puts errors_output
  else
    puts JSCompiler.compile(arg, file, "", level)
  end
else
  puts JSCompiler.compile(arg, file, output_info, level)
end
