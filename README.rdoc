jsc, JavaScript Compiler
    by sub
    http://github.com/sub/jsc

== DESCRIPTION:

Simple Ruby API to Google Closure Compiler Web service.

== FEATURES:

With <b>jsc</b> you can compile your JavaScript code throught {Google Closure Compiler REST service}[http://code.google.com/closure/compiler/].

The package comes with a jsc commands which accepts several options, run:

  jsc --help 

for help.

More in details:
* Ruby API actually is a single function call (ex: JSCompiler.compile(file_name, "statistics", "SIMPLE_OPTIMIZATIONS") )
* Handling of JSON responses, parse and print them (same output of the Google web interface!)
* Handling of Server Errors responses
* Compile a piece of code, a file or a whole directory
* <b>Emacs snippet</b> to compile code your code for errors and warnings

Check {Google API Reference}[http://code.google.com/intl/it-IT/closure/compiler/docs/api-ref.html] for more info about accepted parameters.

== SYNOPSIS:

Compile a file:

  ruby bin/jsc -f js/compiled_code.js

Compile a file, check for errors:

  ruby bin/jsc -f js/errors.js -e

Compile a file, check for warnings:

  ruby bin/jsc -f js/warnings.js -w

Compile a file and get compression stats:

  ruby bin/jsc -f js/compiled_code.js -s

Compile a piece of code, check for errors:

  ruby bin/jsc -e "function("

<b>NOTE</b>: the library is a single file, so you can include it and just call one of the compile* functions everywhere in your code.

== EMACS SNIPPETS

Wants to compile your code right from Emacs?

Copy 

  plugins/jsc.el

to your emacs <em>load-path</em> and restart Emacs.

Now, select the code to compile and run:
* <em>CcJe</em> to check for errors
* <em>CcJw</em> to check for warnings.

== REQUIREMENTS:

jsc requires the {bones}[http://gemcutter.org/gems/bones] gem.

== INSTALL:

If you have gemcutter in your gem sources, run:

  gem install jsc

== LICENSE:

GNU General Public License (GPLv3)
